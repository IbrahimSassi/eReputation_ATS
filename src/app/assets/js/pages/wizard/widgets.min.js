$(function() {
    var confirm_delete = 'Are you sure you want to delete this object?';
    var date_format = '%m/%d/%Y';
    var datetime_format = '%Y-%m-%d %H:%M:%S';
    var regex_integer = /[^0-9\-]|\-(?=.)/g;
    var regex_number = /[^0-9\-\.,]|[\-](?=.)|[\.,](?=[0-9]*[\.,])/g;
    var doc = $(document);
    var undef = function(x) {
        return typeof x === 'undefined';
    };
    var remove = function(elem, c) {
        if (elem.hasClass(c)) elem.removeClass(c);
    };
    if (!String.prototype.reverse) {
        String.prototype.reverse = function() {
            return this.split('').reverse().join('');
        };
    }
    doc.on('click', '.close', function() {
        var t = $(this).parent();
        if (t.css('top') == '0px') t.slideUp('slow');
        else t.fadeOut();
    });
    doc.on('keyup', 'input.integer', function() {
        var nvalue = this.value.reverse().replace(regex_integer, '').reverse();
        if (this.value != nvalue) this.value = nvalue;
    });
    doc.on('keyup', 'input.number', function() {
        var nvalue = this.value.reverse().replace(regex_number, '').reverse();
        if (this.value != nvalue) this.value = nvalue;
    });
    doc.on('click', 'input[type="checkbox"].delete', function() {
        if (this.checked && !confirm(confirm_delete))
            this.checked = false;
    });
    doc.on('keyup', 'input[data-range]', function() {
        var t = $(this);
        var v = t.val();
        var range = t.attr('data-range').split(',');
        if (t.is('.integer') || t.is('.number')) {
            v = parseFloat(v);
            range = [range[0] || parseFloat(range[0]), range[1] || parseFloat(range[1])];
        }
        if (undef(v) || ((range[0] != '') && v < range[0]) || ((range[1] != '') && v > range[1]))
            t.addClass('error');
        else remove(t, 'error');
    });
    doc.on('keyup', 'input[data-regex]', function() {
        var t = $(this);
        var v = t.val();
        var re = new RegExp(t.attr('data-regex'));
        if (!v.match(re)) t.addClass('error');
        else remove(t, 'error');
    });
});
// $.fn.calendar = function() {
//     if (this.length > 1)
//         return this.each(function() {
//             $(this).calendar();
//         });
//     var self = this;
//     if (self.data('has-widget')) return;
//     else self.data('has-widget', 1);
//     var swap = function(x) {
//         var w = $('<input/>').addClass(x.attr('class')).attr('style', x.attr('style')).attr('placeholder', x.attr('placeholder')).addClass('has-widget');
//         x.hide().after(w);
//         return w;
//     };
//     var ISO = '{yyyy}-{MM}-{dd} {hh}:{mm}:{ss}';
//     if (self.hasClass('time')) ISO = '{hh}:{mm}:{ss}';
//     var input = swap(self);
//     var popup = $('<table class="cal-wrapper"/>');
//     var value = self.val();
//     var date = Date.create(value);
//     var start = self.data('start') || 'Sunday';
//     var DEFAULT_FORMAT = '{dd}/{MM}/{year} {hh}:{mm} {TT}';
//     var format = self.data('format') || DEFAULT_FORMAT;
//     var format_time = format;
//     if (!self.hasClass('time'))
//         format_time = format_time.split(' ')[1];
//     var timeout = null;
//     var set = function() {
//         var d = input.val().trim().length && date && date.format(ISO);
//         self.val(d || '').change();
//     };
//     var update = (function() {
//         date = Date.create(input.val());
//         redraw(true);
//     }).debounce(100);
//     var func = function(dt) {
//         return function(e) {
//             e.stopPropagation();
//             date = Date.create(q);
//             if (dt['minutes'])
//                 date.set({
//                     seconds: 0,
//                     minutes: 5 * parseInt(date.getMinutes() / 5)
//                 });
//             date.advance(dt);
//             redraw()
//         };
//     };
//     var tr = function(x) {
//         return '<tr>' + x + '</tr>';
//     }
//     var td = function(x, c, d) {
//         return ('<td' +
//             (c && (' class="cal-' + c + '"') || '') +
//             (d && (' colspan="' + d + '"') || '') +
//             '>' + (x || '') + '</td>');
//     };
//     var q = date;
//     var redraw = function(mute) {
//         if (!mute) input.val(date.format(format));
//         if (input.is('.error')) input.removeClass('error');
//         if (input.val().trim() == '') {
//             set();
//             q = Date.create();
//         } else if (date && date != 'Invalid Date') {
//             set();
//             q = Date.create(date);
//         } else {
//             input.addClass('error');
//             q = Date.create();
//         }
//         var row = '',
//             k = 0,
//             html = '';
//         var day = Date.create(q).set({
//             day: 1
//         });
//         while (!day.is(start)) day.advance({
//             days: -1
//         });
//         var next = Date.create(q).advance({
//             months: 1
//         }).set({
//             days: 7
//         });
//         while (!day.is(start)) next.advance({
//             days: -1
//         });
//         if (format.indexOf('{year}') >= 0) {
//             html += tr(td('&laquo;', 'ym') + td('&lsaquo;', 'mm') +
//                 td(q.format('{Mon} {year}'), 'y', 3) +
//                 td('&rsaquo;', 'mp') + td('&raquo;', 'yp'));
//             var tds = [0, 1, 2, 3, 4, 5, 6].map(function(n) {
//                 return td((n).daysAfter(start).format('{Dow}'));
//             });
//             html += tr(tds.join(''));
//             while (day.isBefore(next)) {
//                 if (k % 7 == 0)
//                     row = '';
//                 if (day.is(q))
//                     row += td(day.format('{d}'), 'selected');
//                 else if (day.getMonth() == q.getMonth())
//                     row += td(day.format('{d}'), 'day');
//                 else
//                     row += td('');
//                 day.advance({
//                     days: 1
//                 });
//                 k++;
//                 if (k % 7 == 0) html += tr(row);
//             }
//         }
//         if (format.indexOf('{hh}') >= 0) {
//             html += tr(td('&laquo;', 'Hm') + td('&lsaquo;', 'mim') +
//                 td(q.format(format_time), 't', 3) +
//                 td('&rsaquo;', 'mip') + td('&raquo;', 'Hp'));
//         }
//         popup.html(html).find('td').css({
//             'text-align': 'center'
//         });
//         popup.find('.cal-ym').click(func({
//             years: -1
//         }));
//         popup.find('.cal-yp').click(func({
//             years: +1
//         }));
//         popup.find('.cal-mm').click(func({
//             months: -1
//         }));
//         popup.find('.cal-mp').click(func({
//             months: +1
//         }));
//         popup.find('.cal-Hm').click(func({
//             hours: -1
//         }));
//         popup.find('.cal-Hp').click(func({
//             hours: +1
//         }));
//         popup.find('.cal-mim').click(func({
//             minutes: -5
//         }));
//         popup.find('.cal-mip').click(func({
//             minutes: +5
//         }));
//         popup.find('.cal-day').click(function(e) {
//             e.stopPropagation();
//             date = q;
//             var d = parseInt($(this).text());
//             date.set({
//                 day: d
//             });
//             redraw();
//         });
//         popup.find('.cal-y,.cal-t,.cal-selected').css('font-weight', 'bold');
//         $('.cal-wrapper').not(popup).hide();
//         popup.fadeIn();
//     }
//     var close = function(e) {
//         var q = $(e.target);
//         if (q.is('input') || q.closest('.cal-wrapper').length > 0) return;
//         set();
//         if (timeout) clearTimeout(timeout);
//         timeout = setTimeout(function() {
//             if (popup.find('td:hover').length == 0)
//                 popup.fadeOut();
//         }, 300);
//     };
//     input.keyup(update).blur(close).click(function(e) {
//         e.stopPropagation();
//         redraw();
//     });
//     $('html').on('click', close);
//     popup.click(function(e) {
//         e.stopPropagation();
//     });
//     popup.css({
//         'position': 'absolute',
//         'z-index': 3000,
//         'top': (input.position().top + input.height() + 10) + 'px',
//         'left': (input.position().left) + 'px',
//         'cursor': 'pointer',
//         'background': 'white',
//         'box-shadow': '0 0 12px #ddd'
//     });
//     input.val(date.format(format)).after(popup);
//     set();
//     self.on('set', function(event, k) {
//         self.val(k);
//         date = Date.create(k);
//         input.val(date.format(format));
//     });
//     $(window).on('resize', function() {
//         popup.css({
//             top: (input.position().top + input.height() + 10) + 'px',
//             left: input.position().left + 'px'
//         });
//     });
// };
// $(function() {
//     $('input.date,input.datetime,input.time').calendar();
// });
$(function() {
    $('.date[date-format]:not(input),.datetime[date-format]:not(input),.time[date-format]:not(input)').each(function() {
        t = $(this);
        t.html(Date.create(t.html()).format(t.date('format')));
    });
});
// $.fn.slider = function() {
//     if (this.length > 1)
//         return this.each(function() {
//             $(this).slider();
//         });
//     var self = this;
//     if (self.data('has-widget')) return;
//     else self.data('has-widget', 1);
//     var slider = $('<div/>');
//     var range = self.attr('data-range').split(',');
//     var decimals = range[1] && range[1].split('.')[1];
//     decimals = decimals && decimals.length || 0;
//     range = range.map(parseFloat);
//     slider.css({
//         position: 'absolute',
//         'z-index': 1,
//         top: (self.position().top + self.outerHeight() - 5) + 'px',
//         left: self.position().left + 'px',
//         height: 5 + 'px',
//         'pointer-events': 'none',
//         background: 'rgba(0,0,0,0.2)'
//     });
//     var left = parseInt(self.css('padding-left').replace('px', ''));
//     var right = parseInt(self.css('padding-right').replace('px', ''));
//     var update = (function(e) {
//         var shift = e.offsetX;
//         var percent = Math.max(0, Math.min(1.0, shift / (self.outerWidth())));
//         var value = range[0] + percent * (range[1] - range[0]);
//         if (range[2]) value = range[2] * Math.round(value / range[2]);
//         if (self.is('.integer')) value = parseInt(value);
//         else value = Math.round(value, decimals);
//         self.val(value).change();
//         slider.css({
//             width: shift + 'px'
//         });
//     }).throttle(10);
//     var onchange = function() {
//         if (self.val()) width = (self.outerWidth()) * Math.max(0, Math.min(1, parseFloat(self.val()) / (range[1] - range[0])));
//         else width = 0;
//         slider.css({
//             width: width
//         });
//     }
//     onchange();
//     self.keyup(onchange);
//     self.dblclick(update);
//     self.after(slider);
//     var isDragging = false;
//     self.mousedown(function() {
//         isDragging = true;
//     });
//     self.mousemove(function(e) {
//         if (isDragging) update(e);
//     });
//     self.mouseout(function(e) {
//         isDragging = false
//     });
//     self.mouseup(function() {
//         isDragging = false;
//     });
//     $(window).on('resize', function() {
//         slider.css({
//             top: (self.position().top + self.outerHeight() - 5) + 'px',
//             left: self.position().left + 'px'
//         });
//     });
// };
// $(function() {
//     $('input.slider').slider();
// });
// $.fn.stars = function() {
//     if (this.length > 1)
//         return this.each(function() {
//             $(this).stars();
//         });
//     var self = this;
//     if (self.data('has-widget')) return;
//     else self.data('has-widget', 1);
//     var span = $('<span class="stars-wrapper" style="white-space:nowrap"><span data-value="1">&#x2606;</span><span data-value="2">&#x2606;</span><span data-value="3">&#x2606;</span><span data-value="4">&#x2606;</span><span data-value="5">&#x2606;</span></span>');
//     self.hide().after(span);
//     span.css('padding-left', self.css('padding-left'));
//     var dv = function(span, i) {
//         return span.find('[data-value=' + i + ']');
//     }
//     var fill_stars = function() {
//         var k = parseInt(self.val()) || 0;
//         for (var i = 1; i < 6; i++)
//             dv(span, i).html((i <= k) ? '&#x2605;' : '&#x2606;');
//     };
//     for (var k = 0; k < 6; k++)(function(k) {
//         dv(span, k).mouseover(function() {
//             for (var i = 1; i < 6; i++)
//                 dv(span, i).html((i <= k) ? '&#x2605;' : '&#x2606;');
//         }).click(function() {
//             self.val(k).change();
//             fill_stars();
//         });
//     })(k);
//     span.mouseout(fill_stars);
//     fill_stars();
//     self.on('set', function(event, k) {
//         self.val(k);
//         fill_stars();
//     });
// };
// $(function() {
//     $('input.stars').stars();
// });
$.fn.tags = function() {
    if (this.length > 1)
        return this.each(function() {
            $(this).tags();
        });
    var self = this;
    if (self.data('has-widget')) return;
    else self.data('has-widget', 1);
    var swap = function(x) {
        var w = $('<input/>').addClass(x.attr('class')).attr('style', x.attr('style')).attr('placeholder', x.attr('placeholder')).addClass('has-widget');
        x.hide().after(w);
        return w;
    };
    var sep = self.data('separator') || ';';
    var tags = self.val().split(sep);
    var options = self.data('options') || [];
    tags.map(function(k) {
        if (options.indexOf(k) < 0) options.push(k);
    });
    var container = $('<div class="tags dismissible"/>');
    var input = swap(this);
    options = options && options.split(sep) || [];
    container.css('padding-left', self.css('padding-left'));
    self.after(container);
    var tag = function(name) {
        return $('<span>' + name + '</span>').data('tag-name', name);
    };
    var show = function() {
        container.html('');
        for (var i = 0; i < options.length; i++) {
            var t = tag(options[i]);
            if (tags.indexOf(options[i]) < 0)
                t.addClass('off');
            container.append(t).append(' ');
        }
        self.val(tags.join(sep)).change();
    };
    var add = function(k) {
        k = k.trim().replace(regex, '');
        if (k) {
            if (tags.indexOf(k) < 0) tags.push(k);
            if (options.indexOf(k) < 0) options.push(k);
        }
    };
    var regex = /(^[,;:-]+|[,;:-]+$)/;
    input.keyup(function(e) {
        e.preventDefault();
        var code = e.keyCode || e.which;
        if (code == 13) {
            input.val().split(';').map(add);
            input.val('');
            show();
        };
    });
    container.on('click', 'span:not(.off)', function() {
        var p = $(this);
        var k = p.data('tag-name');
        tags.splice(tags.indexOf(k), 1);
        p.remove();
        show();
    });
    container.on('click', 'span.off', function() {
        var p = $(this);
        tags.push(p.data('tag-name'));
        show();
        p.remove();
    });
    self.on('set', function(event, k) {
        tags = [];
        k.split(sep).map(add);
        show();
    });
    show();
};
$(function() {
    $('input.tags').tags();
});
$.fn.autocomplete = function() {
    if (this.length > 1)
        return this.each(function() {
            jQuery(this).autocomplete();
        });
    var _options = [],
        _callback = null;
    if (this.data('source').substr(0, 4) == 'url:') {
        $.getJSON(this.data('source').substr(4)).done(function(data) {
            _options = data;
        });
    }
     if (this.data('source').substr(0, 7) == 'search:') {
        _callback = this.data('source').substr(7);
    } else {
        try {
            _options = eval('(' + (this.data('source') || []) + ')');
        } catch (e) {
            console.log('invalid source:' + this.data('source'));
        }
    }
    var self = this;
    if (self.data('has-widget')) return;
    else self.data('has-widget', 1);
    var swap = function(x) {
        var w = $('<input/>').addClass(x.attr('class')).attr('style', x.attr('style')).attr('placeholder', x.attr('placeholder')).addClass('has-widget');
        x.hide().after(w);
        return w;
    };
    var mode = this.data('mode') || 'simple';
    var min_length = parseInt(this.data('min-length') || '2');
    var input = (mode == 'keyed') ? swap(self) : self;
    _options.sort(function(a, b) {
        return (a[0] < b[0]) ? (-1) : ((a[0] > b[0]) ? (+1) : 0);
    });
    var suggestion = input.clone().attr('placeholder', '').hide();
    var popup = jQuery('<ul class="autocomplete"/>').hide();
    input.after(popup);
    input.after(suggestion);
    input.focus(function() {
        popup.show();
        suggestion.show();
        suggestion.css({
            position: 'absolute',
            'z-index': 1,
            top: input.position().top + 'px',
            left: input.position().left + 'px',
            height: input.outerHeight() + 'px',
            width: input.outerWidth() + 'px',
            color: 'rgba(0,0,0,0.3)',
            background: 'transparent'
        });
        popup.css({
            'position': 'absolute',
            'z-index': 3000,
            'cursor': 'pointer',
            'top': (input.position().top + input.outerHeight()) + 'px',
            'left': (input.position().left) + 'px',
            'width': input.outerWidth() + 'px',
            'background': 'white',
            'box-shadow': '0 0 12px #ddd'
        });
    });
    input.blur(function() {
        popup.fadeOut();
        suggestion.hide();
    });
    var p = 0;
    var get = function() {
        return input.val().split(/\s+/ig);
    }
    var cmp = function(a, b) {
        a = a.toLowerCase();
        b = b.toLowerCase();
        return (a == b) ? 0 : ((a < b) ? -1 : +1);
    }
    var getval = function(item) {
        var keywords = get();
        var v;
        for (var k = 0; k < keywords.length; k++) {
            v = keywords.slice(k).join(' ');
            if (cmp(v, item[0].substr(0, v.length)) == 0) break;
        }
        return input.val() + item[0].substr(v.length);
    };
    var select = function(item) {
        if (mode == 'simple') {
            input.val(item[0]).change();
        } else if (mode == 'keyed') {
            input.val(item[0]);
            self.val(item[1]).change();
        } else if (mode == 'chained') {
            input.val(getval(item));
        }
        p = 0;
        items = [];
    };
    var items = [];
    var tab = function(e) {
        if (e.keyCode == 39 || e.keyCode == 9) {
            if (items.length) {
                e.preventDefault();
                popup.hide();
                select(items[p]);
            }
        }
    };
    var keypress = function(e) {
        if (_callback) {
            $.getJSON(_callback.assign(input.get())).done(function(data) {
                _options = data;
                handle_keypress(e);
            });
        } else handle_keypress(e);
    };
    var binary_search = function(v) {
        var imin = 0,
            imax = _options.length;
        while (imax > imin) {
            var i = parseInt((imin + imax) / 2);
            var s = _options[i][0].substr(0, v.length);
            var z = cmp(s, v);
            if (z == 0) {
                while (i > imin) {
                    var s = _options[i - 1][0].substr(0, v.length);
                    if (cmp(s, v) < 0) return i;
                    i--;
                }
                return i;
            } else if (z < 0) imin = i + 1;
            else if (z > 0) imax = i;
        }
        return -1;
    };
    var handle_keypress = function(e) {
        var keywords = get();
        items = [];
        for (var k = 0; k < keywords.length; k++) {
            var v = keywords.slice(k).join(' ');
            if (v.length >= min_length) {
                var i = binary_search(v);
                while (i >= 0 && i < _options.length) {
                    var s = _options[i][0].substr(0, v.length);
                    if (cmp(s, v) == 0) items.push(_options[i]);
                    else break;
                    i++;
                }
            }
        }
        items.sort();
        if (e.keyCode == 13) {
            p = 0;
            popup.hide();
            return;
        } else if (e.keyCode == 40) {
            event.preventDefault();
            p = p + 1;
        } else if (e.keyCode == 38) {
            event.preventDefault();
            p = p - 1;
        } else if (e.keyCode == 39 || e.keyCode == 9) {
            return;
        }
        if (items.length) {
            p = Math.max(0, Math.min(p, items.length - 1));
            suggestion.val(getval(items[p]));
            suggestion.show();
            popup.show().html('');
            for (var i = 0; i < items.length; i++) {
                var li = '<li data-index="' + i + '">' + items[i][0] + '</li>';
                var q = jQuery(li);
                if (i == p) q.css('font-weight', 'bold');
                q.click((function(i) {
                    return function() {
                        select(items[i]);
                    };
                })(i));
                popup.append(q);
            }
        } else {
            suggestion.val('');
            popup.hide();
        }
    };
    input.keyup(keypress).keydown(tab);
    // $(window).on('resize', function() {
    //     suggestion.css({
    //         top: input.position().top + 'px',
    //         left: input.position().left + 'px'
    //     });
    //     popup.css({
    //         top: (input.position().top + input.height() + 10) + 'px',
    //         left: input.position().left + 'px',
    //         width: input.width() + 'px'
    //     });
    // });
};
jQuery(function() {
    jQuery('input.autocomplete').autocomplete();
});
